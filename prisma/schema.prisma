// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int     @id @default(autoincrement())
  username            String  @unique
  email               String  @unique
  password            String
  givenName           String? @map("given_name")
  familyName          String? @map("family_name")
  location            String?
  website             String?
  bio                 String?
  avatarImagePath     String? @map("avatar_image_path")
  favoriteThreeMovies Json?   @map("favorite_three_movies") // Maximum of 3 items allowed - must be validated at application level

  ratings     Rating[]
  ratingLikes RatingLike[]
  followers   UserFollow[] @relation("follower")
  following   UserFollow[] @relation("following")

  @@map("user")
}

// An instance of movie should only be created if an interaction exists
model Movie {
  id         Int      @id @default(autoincrement())
  tmdbId     Int      @unique @map("tmdb_id")
  title      String
  genres     Json
  overview   String
  posterPath String   @map("poster_path")
  year       Int
  duration   Int
  ratings    Rating[]

  @@map("movie")
}

model Rating {
  id         Int     @id @default(autoincrement())
  userId     Int     @map("user_id")
  movieId    Int     @map("movie_id")
  rating     Float
  commentary String?

  toMovie     Movie        @relation(fields: [movieId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  fromUser    User         @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  ratingLikes RatingLike[]

  @@unique([userId, movieId]) // This will avoid rating duplications
  @@map("rating")
}

model RatingLike {
  userId   Int @map("user_id")
  ratingId Int @map("rating_id")

  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  rating Rating @relation(fields: [ratingId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([userId, ratingId])
  @@map("rating_like")
}

model UserFollow {
  followerId  Int @map("follower_id")
  followingId Int @map("following_id")

  follower  User @relation("follower", fields: [followerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("user_follow")
}
